
var utils  = require("./utils.js"),
    colors = require("../../colors"),

    CRLF = "\r\n";

function tab(count) {
    var result = "\t";
    if (count != null) {
        while (--count) {
            result += "\t";
        }
    }
    return result;
}

function parse(cwd, inputDirectory, outputDirectory, files, folders) {

    var result = "Schematic:".bold + tab(1) + "+".grey.inverse + " Copy/Concat " + "+".green.inverse + " Compile " + "+".cyan.inverse + " Minify" + CRLF + CRLF,
        file = null,
        temp = "",
        len = 0,
        i = 0;

        result += tab() + "output directory: " + outputDirectory + CRLF;
        result += tab() + "input directory: " + inputDirectory + CRLF;

    if (files != null) {
        if (files.length > 0) {
            result += CRLF + tab() + "Files:".bold + CRLF;
            for (i = 0, len = files.length; i < len; i++) {
                file = files[i];
                temp = CRLF + tab(1);
                if (file.minify) {
                    temp += "+".cyan;
                } else if(file.compile) {
                    temp += "+".green;
                } else {
                    temp += "+".grey;
                }
                temp = temp.inverse + " " + utils.relative(cwd, file.output);
                result += temp;
                temp = "";
                for (var j = 0; j < file.input.length; j++) {
                    temp += CRLF + tab(2) + utils.relative(cwd, file.input[j]);
                };
                result += temp.grey;
            };
        }
    }
    result += CRLF;
    if (folders != null) {
        if (folders.length > 0) {
            result += CRLF + tab() + "Folders:".bold + CRLF;
            for (i = 0, len = folders.length; i < len; i++) {
                folder = folders[i];
                temp = CRLF + tab(1) + "+".grey;
                temp = temp.inverse + " " + utils.relative(cwd, folder.output);
                result += temp;
                temp = "";
                for (var j = 0; j < folder.input.length; j++) {
                    temp += CRLF + tab(2) + utils.relative(cwd, folder.input[j]);
                };
                result += temp.grey;
            };
        }
    }
    return result;
}

function api(){ };
api.parse = parse;
module.exports = api;