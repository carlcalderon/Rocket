//============================================================
//
// UTILS
//
//============================================================

//============================================================
// CONSTANTS
//============================================================
var FILE_ENCODING   = "utf8",
    FILE_SEPARATOR  = "\r\n",

//============================================================
// PATTERNS
//============================================================
    REGEXP_TRIM     = function() { return /(\S+)/g; },

//============================================================
// DEPENDENCIES
//============================================================
    colors      = require("../../colors"),
    crypto      = require("crypto"),
    paths       = require("path"),
    fs          = require("fs"),
    cp          = require("child_process"),

//============================================================
// SHORTHANDS AND HELPERS
//============================================================
    filename    = paths.basename,
    relative    = paths.relative,
    resolve     = paths.resolve,
    dirname     = paths.dirname,
    unlink      = fs.unlinkSync,
    stdout      = console.log
    mkdir       = fs.mkdirSync,
    exist       = paths.existsSync,
    exec        = cp.exec,
    isDirectory = function (path)          { return fs.statSync(path).isDirectory(); },
    extension   = function (path)          { return path.substr(path.lastIndexOf(".") + 1); },
    write       = function (path, content) { return fs.writeFileSync(path, content, FILE_ENCODING); },
    read        = function (path)          { return fs.readFileSync(path, FILE_ENCODING); },
    md5         = function (string)        { return crypto.createHash("md5").update(string).digest("hex"); },
    now         = function ()              { return new Date().toLocaleTimeString(); },
    stderr      = function (code, message, exit) {
        stdout("ERR!".red.inverse + " " + message)
        if (exit == null || exit == true) {
            process.exit(code);
        }
    },
    concatenate = function (list) {
        var result = "",
            len    = list.length,
            i      = 0;
        for ( ; i < len; i++) {
            result += read(list[i]) + FILE_SEPARATOR;
        };
        return result;
    },
    trim = function (string) {
        var result = REGEXP_TRIM().exec(string);
        if (result == null) {
            return null;
        } else if (result.length > 0) {
            return result[1];
        }
        return null;
    },
    allExist = function (list) {
        var i = 0,
            len = list.length;
        for ( ; i < len; i++) {
            if (!exist(list[i])) {
                return false;
            }
        };
        return true;
    },
    mergeObjects = function () {
        var result = {},
            i = 0,
            key = null,
            len = arguments.length,
            object = null;
        for ( ; i < len; i++) {
            object = arguments[i];
            for (key in object) {
                if (object.hasOwnProperty(key)) {
                    result[key] = object[key];
                }
            };
        };
        return result;
    };

//============================================================
// API
//============================================================
function api(){ };

api.mergeObjects = mergeObjects;
api.concatenate  = concatenate;
api.isDirectory  = isDirectory;
api.extension    = extension;
api.filename     = filename;
api.relative     = relative;
api.allExist     = allExist;
api.resolve      = resolve;
api.dirname      = dirname;
api.unlink       = unlink;
api.stdout       = stdout;
api.stderr       = stderr;
api.mkdir        = mkdir;
api.exist        = exist;
api.write        = write;
api.read         = read;
api.exec         = exec;
api.trim         = trim;
api.now          = now;
api.md5          = md5;

module.exports = api;