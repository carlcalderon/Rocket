function api(){ };

var fs      = require('fs');
var path    = require('path');
var exec    = require("child_process").exec;
var crypto  = require("crypto");

/**
 * Removes a directory.
 * @param  {String}   path    Directory to remove
 * @param  {Function} callback  Callback
 */
function removeDir(path, callback) {
    exec('sudo rm -R ' + path, callback);
}

/**
 * Creates a directory.
 * @param  {String}   path    Directory to add
 * @param  {Function} callback  Callback
 */
function createDir(path, callback) {
    exec('mkdir ' + path, callback);
}

/**
 * Copy a directory.
 * @param  {String}   from     Directory path
 * @param  {String}   to       Directory path
 * @param  {Function} callback Callback
 */
function copyDir(from, to, callback) {
    exec("cp -f -R \"" + from + "\" \"" + to + "\"", callback);
}

/**
 * Touch file.
 * @param  {String}   path      File to touch
 * @param  {Function} callback  Callback
 */
function touch(path, callback) {
    exec('touch ' + path, callback);
}

/**
 * Returns the extension of the specified file.
 * TODO: regex
 * @param  {String}   path      File
 * @return {String}   File extension
 */
function extension(path) {
    return path.substr(path.lastIndexOf(".") + 1);
}

/**
 * Writes the provided string to the specified file.
 * TODO: validate touch
 * @param  {String}   path     Path to file
 * @param  {String}   string   Content
 * @param  {Function} callback Callback
 */
function write(path, string, callback) {
    touch(path, function() {
        var fd = fs.openSync(path, "w");
        fs.writeSync(fd, string);
        fs.closeSync(fd);
        callback();
    });
}

/**
 * Returns the contents of a file.
 * @param {String} path     Path to file
 * @return {String} Contents
 */
function read(path) {
    fs.readFileSync(path);
}

/**
 * Returns num tabs. Default 1
 * @param  {Number} num Number of tabs
 * @return {String}     Tabs
 */
function tab(num) {
    num = num || 1;
    var result = "";
    while(num--) {
        result += "\t";
    }
    return result;
}

/**
 * Create MD5 checksum.
 * @param {String} string Input source
 */
function MD5(string) {
    return crypto.createHash("md5").update(string).digest("hex");
}

api.write     = write;
api.read      = read;
api.tab       = tab;
api.touch     = touch;
api.extension = extension;
api.copyDir   = copyDir;
api.createDir = createDir;
api.removeDir = removeDir;
api.MD5       = MD5;

module.exports = api